/*
 * Copyright 2020 Board of Trustees of the University of Illinois.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id "dev.flutter.flutter-gradle-plugin"
    id "org.jetbrains.kotlin.android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id 'com.github.triplet.play' version '2.2.1'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

/* Reason: https://docs.flutter.dev/release/breaking-changes/flutter-gradle-plugin-apply
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}
*/

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

/* Reason: https://docs.flutter.dev/release/breaking-changes/flutter-gradle-plugin-apply
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
*/

repositories{
    mavenCentral()
}

android {
    compileSdkVersion 34

    namespace 'edu.illinois.rokwire'

    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
    
    defaultConfig {
        applicationId "edu.illinois.rokwire"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    if (isRunningOnTravis) {
        // configure keystore
        println 'travis-ci release build'
        signingConfigs {
            release {
                storeFile file("../../android-releasekey.keystore")
                storePassword System.getenv("androidkeystore_password") ?: "androidstore_passwd"
                keyAlias System.getenv("androidkeystore_alias") ?: "androidkeystore_alias"
                keyPassword System.getenv("androidkeystore_alias_password") ?: "androidkeystore_alias_password"
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a'
                }
            }
        }
    } else {
        buildTypes {
            release {
                // Add your own signing config for the release build.
                // Signing with the debug keys for now, so `flutter run --release` works.
                signingConfig signingConfigs.debug
                minifyEnabled true
                shrinkResources true

                ndk {
                    abiFilters 'arm64-v8a', 'armeabi-v7a'
                }
            }
        }
    }

    flavorDimensions "product", "environment"
    productFlavors {
        dev {
            dimension "environment"
        }
        prod {
            dimension "environment"
        }
        tst {
            dimension "environment"
        }
        illinois {
            dimension "product"
            applicationId "edu.illinois.rokwire"

            def illinoisKeysProperties = new Properties()
            def illinoisKeysPropertiesFile = rootProject.file('app/src/illinois/keys.properties')
            if (illinoisKeysPropertiesFile.exists()) {
                illinoisKeysPropertiesFile.withReader('UTF-8') { reader ->
                    illinoisKeysProperties.load(reader)
                }
            }
            manifestPlaceholders = [mapsApiKey: "${illinoisKeysProperties.getProperty('googleMapsApiKey')}"]

            //Origo Mobile keys build configurations - see keys.properties
            resValue "string", "hceAidFilter1", "${illinoisKeysProperties.getProperty('origoAidFilter1')}"
            resValue "string", "hceAidFilter2", "${illinoisKeysProperties.getProperty('origoAidFilter2')}"

            buildConfigField "String", "ORIGO_APP_ID", "\"${illinoisKeysProperties.getProperty('origoAppId')}\""
            buildConfigField "int", "ORIGO_LOCK_SERVICE_CODE", illinoisKeysProperties.getProperty('origoLockServiceCode')
        }
    }

    // Workaround for building app bundle - flutter/Android
    applicationVariants.all { variant ->
        variant.outputs.all {
            def taskSuffix = variant.name.capitalize()
            def bundleTaskName = "bundle${taskSuffix}"
            if (tasks.findByName(bundleTaskName)) {
                def copyAABTask = tasks.create(name: "copyAndRenameAab${taskSuffix}", type: Copy) {
                    def bundleBuildDir = "${buildDir}/outputs/bundle"
                    def originalDirPath = "${variant.productFlavors.name.join()}${variant.buildType.name}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
                    from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    into "${bundleBuildDir}/${variant.buildType.name}/"
                    rename ("${originalFileName}", "app.aab")
                }
                tasks[bundleTaskName].finalizedBy = [copyAABTask]
            }
        }
    }
}

play {
    track = 'alpha'
    serviceAccountCredentials = file("../../google-playstore-apikey.json")
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //Common dependencies
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.gms:play-services-location:20.0.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.google.code.gson:gson:2.8.9' // used by maps and origo as well
    //Firebase
    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation 'com.google.firebase:firebase-analytics:21.1.1'
    implementation 'com.google.firebase:firebase-messaging:23.0.8'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.13'

    //Lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //Security - also required by Origo 1.7.7 and above
    implementation "androidx.security:security-crypto:1.1.0-alpha06"

    // Support foldable devices
    implementation "androidx.window:window:1.0.0"
    //end Common

    //Zxing
    implementation 'com.google.zxing:core:3.3.0' //Use zxing 3.3.0 because we have minSdk < 24

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Origo and mobile keys SDK
    debugImplementation name: '../../libs/hid-origo/android/origo-sdk-debug', version: '1.10.0', ext: 'aar'
    releaseImplementation name: '../../libs/hid-origo/android/origo-sdk-release', version: '1.10.0', ext: 'aar'

    // Origo transitive dependencies
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.mixpanel.android:mixpanel-android:5.8.5'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    // end Origo
}

apply plugin: 'com.google.gms.google-services'
